{"version":3,"sources":["data.js","cases/NewCase.jsx","cases/Cases.jsx","buckets/Buckets.jsx","sample-allocation/allocate-samples.js","App.jsx","serviceWorker.js","index.js","risk.js"],"names":["SYMPTOMS","FEVER","COUGH","BREATHING_PROBLEM","CLOSE_CONTACT","COMING_FROM_ABROAD","SYMPTOM_NAMES","initialState","id","symptoms","createNext","NewCase","open","handleClose","React","useState","values","setValues","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","FormGroup","column","TextField","label","variant","onChange","event","target","value","required","Object","keys","map","symptomName","FormControlLabel","key","control","Checkbox","checked","symptom","name","DialogActions","Button","onClick","close","color","disabled","symptomOccurred","occurred","CheckCircleOutline","style","green","HighlightOff","red","Cases","cases","addCase","newCaseModal","openModal","filter","length","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","row","scope","includes","probability","toFixed","display","width","justifyContent","margin","Fab","size","startIcon","Buckets","buckets","Grid","container","direction","justify","alignItems","spacing","bucket","index","item","elevation","className","Typography","padding","samples","sample","Card","CardContent","Link","ButtonGroup","orientation","fullWidth","SentimentVerySatisfied","SentimentVeryDissatisfied","HelpOutline","assignNextBucket","sort","first","second","Bucket","freeCapacity","bucketRanges","BucketProbabilityRange","i","t","isInRange","bestBucketSize","console","error","findBestBucketCapacity","s","push","reverseProbability","numberOfAllBuckets","minimumm","maximum","undefined","this","minimum","prototype","p","App","props","state","currentStep","calculateRisk","setState","caseIndex","findIndex","it","splice","samplesParam","slice","result","forEach","indexOf","allocateSamples","changeStage","position","Toolbar","Container","bind","calculateBuckets","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports","risk"],"mappings":"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","file":"static/js/main.879dd3bc.chunk.js","sourcesContent":["export const STEPS = [\n  'CASES', 'BUCKETS'\n]\n\nexport const SYMPTOMS = {\n  FEVER: 'FEVER',\n  COUGH: 'COUGH',\n  BREATHING_PROBLEM: 'BREATHING_PROBLEM',\n  CLOSE_CONTACT: 'CLOSE_CONTACT',\n  COMING_FROM_ABROAD: 'COMING_FROM_ABROAD'\n}\n","import React from 'react'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport Button from '@material-ui/core/Button'\nimport { SYMPTOMS } from '../data'\nimport FormGroup from '@material-ui/core/FormGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport TextField from '@material-ui/core/TextField'\n\nconst SYMPTOM_NAMES = {\n  [SYMPTOMS.FEVER]: 'Fever',\n  [SYMPTOMS.COUGH]: 'Cough',\n  [SYMPTOMS.BREATHING_PROBLEM]: 'Difficulty with breathing',\n  [SYMPTOMS.COMING_FROM_ABROAD]: 'Return from Abroad',\n  [SYMPTOMS.CLOSE_CONTACT]: 'Close contact with infected person'\n}\n\nconst initialState = {\n  id: '',\n  symptoms: {\n    [SYMPTOMS.FEVER]: false,\n    [SYMPTOMS.COUGH]: false,\n    [SYMPTOMS.BREATHING_PROBLEM]: false,\n    [SYMPTOMS.COMING_FROM_ABROAD]: false,\n    [SYMPTOMS.CLOSE_CONTACT]: false\n  },\n  createNext: false\n}\nexport const NewCase = ({ open, handleClose }) => {\n  const [values, setValues] = React.useState(initialState)\n\n  const updateSymptom = symptom => () => {\n    setValues({\n      ...values,\n      symptoms:\n        {\n          ...values.symptoms,\n          [symptom]: !values.symptoms[symptom]\n        }\n    })\n  }\n\n  const updateCreateNext = () => {\n    setValues({\n      ...values,\n      createNext: !values.createNext\n    })\n  }\n\n  const updateId = (event) => {\n    setValues({ ...values, id: event.target.value })\n  }\n\n  const clearValues = () => {\n    setValues({ ...initialState, createNext: true })\n  }\n\n  const createNewCase = () => {\n    if (!values.createNext) {\n      handleClose({ close: true, values: { id: values.id, symptoms: values.symptoms } })\n    } else {\n      handleClose({ close: false, values: { id: values.id, symptoms: values.symptoms } })\n      clearValues()\n    }\n  }\n\n  const closeDialog = () => {\n    handleClose({ close: true })\n  }\n\n  return (\n    <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n      <DialogTitle id=\"form-dialog-title\">Craete new case</DialogTitle>\n      <DialogContent>\n\n        <FormGroup column>\n\n          <TextField\n            label=\"id\"\n            variant=\"outlined\"\n            onChange={updateId}\n            value={values.id}\n            required={true}\n          />\n          {\n            Object.keys(SYMPTOMS).map(symptomName =>\n              <FormControlLabel\n                key={symptomName}\n                control={<Checkbox checked={values.symptoms[symptomName]} onChange={updateSymptom(symptomName)} name={SYMPTOM_NAMES[symptomName]}/>}\n                label={SYMPTOM_NAMES[symptomName]}\n              />)\n          }\n        </FormGroup>\n\n\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={closeDialog} color=\"secondary\">\n          Close\n        </Button>\n        <FormControlLabel\n          control={<Checkbox checked={values.createNext} onChange={updateCreateNext} color={'secondary'}/>}\n          label=\"Create next case\"\n        />\n        <Button onClick={createNewCase} color=\"primary\" disabled={!values.id}>\n          Create\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n","import React from 'react'\n\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Paper from '@material-ui/core/Paper'\nimport { SYMPTOMS } from '../data'\nimport { CheckCircleOutline, HighlightOff } from '@material-ui/icons'\nimport green from '@material-ui/core/colors/green'\nimport red from '@material-ui/core/colors/red'\nimport Fab from '@material-ui/core/Fab'\nimport AddIcon from '@material-ui/icons/Add'\nimport { NewCase } from './NewCase'\nimport Button from '@material-ui/core/Button'\n\nconst symptomOccurred = occurred => occurred ?\n  <CheckCircleOutline style={{ color: green[500] }}/> : <HighlightOff style={{ color: red[500] }}/>\n\nexport const Cases = ({ cases, addCase }) => {\n  const [values, setValues] = React.useState({ newCaseModal: false })\n\n  const openModal = () => {\n    setValues({ newCaseModal: true })\n  }\n\n  const closeModal = ({ close, values }) => {\n    setValues({ newCaseModal: !close })\n    if (values) {\n      addCase({ id: values.id, symptoms: Object.keys(values.symptoms).filter(key => values.symptoms[key]) })\n    }\n  }\n\n  return (\n    <div>\n      <NewCase open={values.newCaseModal} handleClose={closeModal}/>\n      {!!cases.length && <div>\n        <TableContainer component={Paper}>\n          <Table aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell> <b>id</b></TableCell>\n                <TableCell align=\"right\"><b>Fever</b></TableCell>\n                <TableCell align=\"right\"><b>Cough</b></TableCell>\n                <TableCell align=\"right\"><b>Difficulty with breathing</b></TableCell>\n                <TableCell align=\"right\"><b>Close contact with infected person</b></TableCell>\n                <TableCell align=\"right\"><b>Return from Abroad</b></TableCell>\n                <TableCell align=\"right\"><b>Probability</b></TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {cases.map((row) => (\n                <TableRow key={row.id}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.id}\n                  </TableCell>\n                  <TableCell align=\"right\">{symptomOccurred(row.symptoms.includes(SYMPTOMS.FEVER))}</TableCell>\n                  <TableCell align=\"right\">{symptomOccurred(row.symptoms.includes(SYMPTOMS.COUGH))}</TableCell>\n                  <TableCell align=\"right\">{symptomOccurred(row.symptoms.includes(SYMPTOMS.BREATHING_PROBLEM))}</TableCell>\n                  <TableCell align=\"right\">{symptomOccurred(row.symptoms.includes(SYMPTOMS.CLOSE_CONTACT))}</TableCell>\n                  <TableCell align=\"right\">{symptomOccurred(row.symptoms.includes(SYMPTOMS.COMING_FROM_ABROAD))}</TableCell>\n                  <TableCell align=\"right\">{(row.probability*100).toFixed(2)}%</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <div style={{ display: 'flex', width: '100%', justifyContent: 'flex-end', margin: '16px 0' }}>\n          <Fab onClick={openModal}>\n            <AddIcon/>\n          </Fab>\n        </div>\n      </div>\n      }\n      {!cases.length && <div style={{ display: 'flex', width: '100%', justifyContent: 'center' }}>\n        <Button size=\"large\" color=\"primary\" variant={'contained'} onClick={openModal} startIcon={<AddIcon/>}>\n          Add first case\n        </Button>\n      </div>}\n    </div>\n  )\n}\n","import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\nimport './Bucket.scss'\nimport Typography from '@material-ui/core/Typography'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport Link from '@material-ui/core/Link'\nimport { SentimentVerySatisfied, SentimentVeryDissatisfied, HelpOutline } from '@material-ui/icons'\nimport Button from '@material-ui/core/Button'\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\n\nexport const Buckets = ({ buckets }) => (\n  <div>\n    <Grid\n      container\n      direction=\"row\"\n      justify=\"flex-start\"\n      alignItems=\"flex-start\"\n      spacing={4}\n    >\n      {buckets.map((bucket, index) => (\n\n        <Grid item key={index}>\n          <Paper elevation={0} className={'bucket'}>\n            <Typography variant=\"h5\" component=\"h2\">\n              #{bucket.id}\n            </Typography>\n            <Typography color=\"textSecondary\">\n              Probability: {(bucket.probability*100).toFixed(2)}%\n            </Typography>\n            <Grid\n              container\n              direction=\"column\"\n              justify=\"flex-start\"\n              alignItems=\"center\"\n              spacing={1}\n              style={{padding: \"8px 0\"}}\n            >\n              {bucket.samples.map((sample) =>\n\n                <Grid item key={sample.id}>\n                  <Card className='sampleCard'>\n                    <CardContent>\n                      <Typography variant=\"h5\" component=\"h3\">\n                        <Link>{sample.id}</Link>\n                      </Typography>\n                      <Typography color=\"textSecondary\">\n                        Probability: {(sample.probability*100).toFixed(2)}%\n                      </Typography>\n                    </CardContent>\n                  </Card>\n                </Grid>\n\n              )}\n\n            </Grid>\n\n            <ButtonGroup\n              orientation=\"vertical\"\n              fullWidth\n            >\n              <Button fullWidth variant=\"outlined\" size={'small'} startIcon={<SentimentVerySatisfied/>}> No Virus</Button>\n              <Button fullWidth variant=\"outlined\" size={'small'} startIcon={<SentimentVeryDissatisfied/>}> Virus found</Button>\n              <Button fullWidth variant=\"outlined\" size={'small'} startIcon={<HelpOutline/>}> Not tested</Button>\n            </ButtonGroup>\n          </Paper>\n        </Grid>\n      ))}\n    </Grid>\n  </div>\n)\n","export function allocateSamples(samplesParam) {\n    let samples = (samplesParam.slice(0));\n    let result = [];\n    while (!(samples.length === 0)) {\n        let bucket = assignNextBucket(samples);\n\n        result.push(bucket);\n        bucket.samples.forEach(function (s) {\n            samples.splice(samples.indexOf(s), 1);\n        });\n    }\n    return result;\n}\n\nfunction assignNextBucket(samples) {\n    samples.sort(function (first, second) {\n        return first.probability < second.probability ? 1\n            : first.probability > second.probability ? -1\n                : 0;\n    });\n\n    let bucket = new Bucket();\n    let freeCapacity = findBestBucketCapacity(samples[0]);\n    for (let i = 0; i < samples.length; i++) {\n        let s = samples[i];\n        if (freeCapacity > 0) {\n            bucket.samples.push(s);\n            bucket.reverseProbability *= 1 - s.probability;\n            freeCapacity--;\n        }\n    }\n\n    bucket.probability = 1 - bucket.reverseProbability;\n\n    return bucket;\n}\n\n\nfunction findBestBucketCapacity(sample) {\n    const bucketRanges = [\n        new BucketProbabilityRange(0.306, 1, 1),\n        new BucketProbabilityRange(0.124, 0.306, 3),\n        new BucketProbabilityRange(0.066, 0.124, 4),\n        new BucketProbabilityRange(0.042, 0.066, 5),\n        new BucketProbabilityRange(0.029, 0.042, 6),\n        new BucketProbabilityRange(0.021, 0.029, 7),\n        new BucketProbabilityRange(0.016, 0.021, 8),\n        new BucketProbabilityRange(0.013, 0.016, 9),\n        new BucketProbabilityRange(0.011, 0.013, 10),\n        new BucketProbabilityRange(0.009, 0.011, 11),\n        new BucketProbabilityRange(0.007, 0.009, 12),\n        new BucketProbabilityRange(0.006, 0.007, 13),\n        new BucketProbabilityRange(0.005, 0.006, 15),\n        new BucketProbabilityRange(0.004, 0.005, 16),\n        new BucketProbabilityRange(0.003, 0.004, 19),\n        new BucketProbabilityRange(0.002, 0.003, 23),\n        new BucketProbabilityRange(0.0, 0.002, 32)\n    ];\n    for (let i = 0; i < bucketRanges.length; i++) {\n        let t = bucketRanges[i];\n        if (t.isInRange(sample.probability)) {\n            return t.bestBucketSize;\n        }\n    }\n    console.error(\"The sample probability is out of range! \" + sample.probability);\n    return 1;\n}\n\nexport function estimateNumberOfTests(buckets) {\n    let result = 0;\n    for (let i = 0; i < buckets.length; i++) {\n        result += 1;\n        if (buckets[i].samples.length > 1) {\n            result += buckets[i].probability * buckets[i].samples.length;\n        }\n    }\n    return Math.round(result);\n}\n\nconst Sample = (function () {\n    function Sample(id, p) {\n        if (this.id === undefined)\n            this.id = null;\n        if (this.probability === undefined)\n            this.probability = null;\n        this.id = id;\n        this.probability = p;\n    }\n\n    return Sample;\n}());\nSample[\"__class\"] = \"Sample\";\n\nlet numberOfAllBuckets = 0;\n\nclass Bucket {\n    id = ++numberOfAllBuckets;\n    probability = 0.0;\n    reverseProbability = 1.0;\n    samples = []\n}\n\nconst BucketProbabilityRange = (function () {\n    function BucketProbabilityRange(minimumm, maximum, bestBucketSize) {\n        if (this.minimum === undefined)\n            this.minimum = 0;\n        if (this.maximum === undefined)\n            this.maximum = 0;\n        if (this.bestBucketSize === undefined)\n            this.bestBucketSize = 0;\n        this.minimum = minimumm;\n        this.maximum = maximum;\n        this.bestBucketSize = bestBucketSize;\n    }\n\n    BucketProbabilityRange.prototype.isInRange = function (p) {\n        return this.minimum <= p && p < this.maximum;\n    };\n    return BucketProbabilityRange;\n}());\nBucketProbabilityRange[\"__class\"] = \"BucketProbabilityRange\";\n\n/*\n// used in allocate-samples-test.js\nmodule.exports = {\n    allocateSamples: allocateSamples,\n    estimateNumberOfTests: estimateNumberOfTests,\n    Sample: Sample,\n    Bucket: Bucket\n};\n*/\n","import React from 'react'\nimport './App.scss'\nimport { Cases } from './cases/Cases'\nimport { SYMPTOMS } from './data'\nimport Container from '@material-ui/core/Container'\nimport { Buckets } from './buckets/Buckets'\nimport AppBar from '@material-ui/core/AppBar/AppBar'\nimport Typography from '@material-ui/core/Typography'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Button from '@material-ui/core/Button'\nimport calculateRisk from './risk'\nimport { allocateSamples } from './sample-allocation/allocate-samples'\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      currentStep: 'CASES',\n      cases: [{\n        id: 1,\n        symptoms: [],\n        probability: 0.05\n      },\n        {\n          id: 2,\n          symptoms: [SYMPTOMS.COUGH],\n          probability: 0.1\n        },\n        {\n          id: 3,\n          symptoms: [SYMPTOMS.BREATHING_PROBLEM, SYMPTOMS.FEVER],\n          probability: 0.3\n        },\n        {\n          id: 4,\n          symptoms: [SYMPTOMS.CLOSE_CONTACT, SYMPTOMS.COMING_FROM_ABROAD],\n          probability: 0.2\n        },\n        {\n          id: 5,\n          symptoms: [SYMPTOMS.COUGH, SYMPTOMS.COMING_FROM_ABROAD],\n          probability: 0.04\n        },\n        {\n          id: 6,\n          symptoms: [SYMPTOMS.COUGH, SYMPTOMS.COMING_FROM_ABROAD],\n          probability: 0.4\n        }\n      ],\n      buckets: []\n    }\n  }\n\n  addCase ({ id, symptoms }) {\n    const probability = calculateRisk(symptoms)\n    this.setState((state, props) => {\n      const cases = [...state.cases, { id, symptoms, probability }]\n      return {\n        ...state,\n        cases\n      }\n    })\n  }\n\n  updateCase ({ id, symptoms }) {\n    const probability = calculateRisk(symptoms)\n    this.setState((state, props) => {\n      const caseIndex = state.cases.findIndex(it => it.id === id)\n      const cases = state.cases.splice(caseIndex, 1)\n      cases.push({ id, symptoms, probability })\n      return {\n        ...state,\n        cases\n      }\n    })\n  }\n\n  changeStage (currentStep) {\n    this.setState((state, props) => ({\n      ...state,\n      currentStep\n    }))\n  }\n\n  calculateBuckets () {\n    const buckets = allocateSamples(this.state.cases)\n    this.setState((state, props) => {\n      return {\n        ...state,\n        buckets\n      }\n    }, () => this.changeStage('BUCKETS'))\n  }\n\n  render () {\n    return (\n      <div className={'App'}>\n        <header>\n          <AppBar position=\"static\">\n            <Toolbar>\n              <Typography variant=\"h6\">\n                Coronadvisor\n              </Typography>\n            </Toolbar>\n          </AppBar>\n        </header>\n\n        <main>\n          <Container>\n            {this.state.currentStep === 'CASES' && (<Cases cases={this.state.cases} addCase={this.addCase.bind(this)}/>)}\n\n            {(!!this.state.cases.length && this.state.currentStep === 'CASES') && <div style={{ display: 'flex', justifyContent: 'center', margin: '16px' }}>\n              <Button size=\"large\" color=\"primary\" variant={'contained'} onClick={this.calculateBuckets.bind(this)}>\n                Calculate buckets\n              </Button>\n            </div>}\n\n            {this.state.currentStep === 'BUCKETS' && <Buckets buckets={this.state.buckets}/>}\n          </Container>\n        </main>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","//this function caluclate risk of positive test on COVID from questionary\nfunction calculateRisk (symptoms) {\n\t//risk of person without symptoms and contact\n\tlet risk = 0.02\n\tif (symptoms.indexOf(\"FEVER\")>-1){\n\t\trisk+=0.02\n\t}\n\tif (symptoms.indexOf(\"COUGH\")>-1){\n\t\trisk+=0.03\n\t}\n\tif (symptoms.indexOf(\"BREATHING_PROBLEM\")>-1){\n\t\trisk+=0.05\n\t}\n\tif (symptoms.indexOf(\"CLOSE_CONTACT\")>-1){\n\t\trisk+=0.1\n\t}\n\tif (symptoms.indexOf(\"COMING_FROM_ABROAD\")>-1){\n\t\trisk+=0.07\n\t}\t\n\tif (symptoms.indexOf(\"PREVIOUS_POSITIVE\")>-1){\n\t\trisk=0.9\n\t}\t\n\trisk.toFixed(3)\n\treturn risk\n}\n\n\nmodule.exports = calculateRisk\n"],"sourceRoot":""}