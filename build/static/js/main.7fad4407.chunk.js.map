{"version":3,"sources":["data.js","cases/NewCase.jsx","cases/Cases.jsx","App.jsx","serviceWorker.js","index.js"],"names":["SYMPTOMS","FEVER","COUGH","BREATHING_PROBLEM","CLOSE_CONTACT","COMING_FROM_ABROAD","SYMPTOM_NAMES","NewCase","open","handleClose","React","useState","id","symptoms","values","setValues","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","FormGroup","column","TextField","label","variant","onChange","event","target","value","Object","keys","map","symptomName","FormControlLabel","key","control","Checkbox","checked","symptom","name","DialogActions","Button","onClick","close","color","disabled","symptomOccurred","occurred","CheckCircleOutline","style","green","HighlightOff","red","Cases","cases","addCase","newCaseModal","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","row","scope","includes","probability","Fab","filter","App","props","state","currentStep","buckets","console","log","this","setState","caseIndex","findIndex","it","splice","push","Container","className","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7fad4407.chunk.js","sourcesContent":["export const STEPS = [\n  'CASES', 'BUCKETS'\n]\n\nexport const SYMPTOMS = {\n  FEVER: 'FEVER',\n  COUGH: 'COUGH',\n  BREATHING_PROBLEM: 'BREATHING_PROBLEM',\n  CLOSE_CONTACT: 'CLOSE_CONTACT',\n  COMING_FROM_ABROAD: 'COMING_FROM_ABROAD'\n}\n","import React from 'react'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport Button from '@material-ui/core/Button'\nimport { SYMPTOMS } from '../data'\nimport FormGroup from '@material-ui/core/FormGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport TextField from '@material-ui/core/TextField'\n\nconst SYMPTOM_NAMES = {\n  [SYMPTOMS.FEVER]: 'Gorączka',\n  [SYMPTOMS.COUGH]: 'Kaszel',\n  [SYMPTOMS.BREATHING_PROBLEM]: 'Duszności',\n  [SYMPTOMS.COMING_FROM_ABROAD]: 'Powrót z zagranicy',\n  [SYMPTOMS.CLOSE_CONTACT]: 'Bliski kontakt z osobą zakażoną'\n}\nexport const NewCase = ({ open, handleClose }) => {\n  const [values, setValues] = React.useState({\n    id: '',\n    symptoms: {\n      [SYMPTOMS.FEVER]: false,\n      [SYMPTOMS.COUGH]: false,\n      [SYMPTOMS.BREATHING_PROBLEM]: false,\n      [SYMPTOMS.COMING_FROM_ABROAD]: false,\n      [SYMPTOMS.CLOSE_CONTACT]: false\n    }\n  })\n\n  const updateSymptom = symptom => () => {\n    setValues({\n      ...values,\n      symptoms:\n        {\n          ...values.symptoms,\n          [symptom]: !values.symptoms[symptom]\n        }\n    })\n  }\n\n  const updateId = (event) => {\n    setValues({ ...values, id: event.target.value })\n  }\n\n  return (\n    <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n      <DialogTitle id=\"form-dialog-title\">Dodaj nowy przypadek</DialogTitle>\n      <DialogContent>\n\n        <FormGroup column>\n\n          <TextField\n            label=\"id\"\n            variant=\"outlined\"\n            onChange={updateId}\n          />\n          {\n            Object.keys(SYMPTOMS).map(symptomName =>\n              <FormControlLabel\n                key={symptomName}\n                control={<Checkbox checked={values[symptomName]} onChange={updateSymptom(symptomName)} name={SYMPTOM_NAMES[symptomName]}/>}\n                label={SYMPTOM_NAMES[symptomName]}\n              />)\n          }\n        </FormGroup>\n\n\n      </DialogContent>\n      <DialogActions>\n\n        <Button onClick={handleClose({ close: true })} color=\"secondary\">\n          Zamknij\n        </Button>\n        <Button onClick={handleClose({ close: true, values })} color=\"primary\" disabled={!values.id}>\n          Stwórz\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n","import React from 'react'\n\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Paper from '@material-ui/core/Paper'\nimport { SYMPTOMS } from '../data'\nimport { CheckCircleOutline, HighlightOff } from '@material-ui/icons'\nimport green from '@material-ui/core/colors/green'\nimport red from '@material-ui/core/colors/red'\nimport Fab from '@material-ui/core/Fab'\nimport AddIcon from '@material-ui/icons/Add'\nimport { NewCase } from './NewCase'\n\nconst symptomOccurred = occurred => occurred ?\n  <CheckCircleOutline style={{ color: green[500] }}/> : <HighlightOff style={{ color: red[500] }}/>\n\nexport const Cases = ({ cases, addCase }) => {\n  const [values, setValues] = React.useState({ newCaseModal: false })\n\n  const openModal = () => {\n    setValues({ newCaseModal: true })\n  }\n\n  const closeModal = ({ close, values }) => () => {\n    setValues({ newCaseModal: !close })\n    if (values) {\n      addCase({ id: values.id, symptoms: Object.keys(values.symptoms).filter(key => values.symptoms[key]) })\n    }\n  }\n\n  return (\n    <div>\n      <TableContainer component={Paper}>\n        <Table aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>id</TableCell>\n              <TableCell align=\"right\">Gorączka</TableCell>\n              <TableCell align=\"right\">Kaszel</TableCell>\n              <TableCell align=\"right\">Duszności</TableCell>\n              <TableCell align=\"right\">Kontak z zakażonym</TableCell>\n              <TableCell align=\"right\">Powrót zza granicy</TableCell>\n              <TableCell align=\"right\">Prawdopodobieństwo</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {cases.map((row) => (\n              <TableRow key={row.id}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {row.id}\n                </TableCell>\n                <TableCell align=\"right\">{symptomOccurred(row.symptoms.includes(SYMPTOMS.FEVER))}</TableCell>\n                <TableCell align=\"right\">{symptomOccurred(row.symptoms.includes(SYMPTOMS.COUGH))}</TableCell>\n                <TableCell align=\"right\">{symptomOccurred(row.symptoms.includes(SYMPTOMS.BREATHING_PROBLEM))}</TableCell>\n                <TableCell align=\"right\">{symptomOccurred(row.symptoms.includes(SYMPTOMS.CLOSE_CONTACT))}</TableCell>\n                <TableCell align=\"right\">{symptomOccurred(row.symptoms.includes(SYMPTOMS.COMING_FROM_ABROAD))}</TableCell>\n                <TableCell align=\"right\">{row.probability}%</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <Fab aria-label={'Dodaj nowy przypadek'} onClick={openModal}>\n        <AddIcon/>\n      </Fab>\n      <NewCase open={values.newCaseModal} handleClose={closeModal}/>\n    </div>\n  )\n}\n","import React from 'react'\nimport './App.scss'\nimport { Cases } from './cases/Cases'\nimport { SYMPTOMS } from './data'\nimport Container from '@material-ui/core/Container'\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      currentStep: 'CASES',\n      cases: [{\n        id: 1,\n        symptoms: [],\n        probability: 0\n      },\n        {\n          id: 2,\n          symptoms: [SYMPTOMS.COUGH],\n          probability: 10\n        }\n      ],\n      buckets: []\n    }\n  }\n\n  addCase ({ id, symptoms }) {\n    console.log(id)\n    console.log(symptoms)\n    const probability = 50\n    this.setState((state, props) => {\n      const cases = [...state.cases, { id, symptoms, probability }]\n      return {\n        ...state,\n        cases\n      }\n    })\n  }\n\n  updateCase ({ id, symptoms }) {\n    const probability = 50\n    this.setState((state, props) => {\n      const caseIndex = state.cases.findIndex(it => it.id === id)\n      const cases = state.cases.splice(caseIndex, 1)\n      cases.push({ id, symptoms, probability })\n      return {\n        ...state,\n        cases\n      }\n    })\n  }\n\n  changeStage (currentStep) {\n    this.setState((state, props) => ({\n      ...state,\n      currentStep\n    }))\n  }\n\n  render () {\n    return (\n      <Container className=\"App\">\n        <Cases cases={this.state.cases} addCase={this.addCase.bind(this)}/>\n      </Container>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}